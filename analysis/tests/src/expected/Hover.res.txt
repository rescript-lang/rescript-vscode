Hover src/Hover.res 0:4
{"contents": "```rescript\nint\n```"}

Hover src/Hover.res 3:5
{"contents": "```rescript\ntype t = (int, float)\n```"}

Hover src/Hover.res 6:7
{"contents": "```rescript\nmodule Id = {\n  type x = int\n}\n```"}

Hover src/Hover.res 19:11
{"contents": "\nThis module is commented\n```rescript\nmodule Dep = {\n  let customDouble: int => int\n}\n```"}

Hover src/Hover.res 22:11
{"contents": "```rescript\nint => int\n```\n\nSome doc comment"}

Hover src/Hover.res 26:6
{"contents": "```rescript\nint\n```"}

Hover src/Hover.res 33:4
{"contents": "```rescript\nunit => int\n```\n\nDoc comment for functionWithTypeAnnotation"}

Hover src/Hover.res 37:13
getLocItem #5: heuristic for JSX and compiler combined:
~x becomes Props#x
heuristic for: [Props, x], give loc of `x`
n1:Props n2:name
{"contents": "```rescript\nstring\n```"}

Hover src/Hover.res 41:13
getLocItem #7: heuristic for JSX on type-annotated labeled (~arg:t):
(~arg:t) becomes Props#arg
Props has the location range of arg:t
arg has the location range of arg
heuristic for: [Props, arg], give loc of `arg`
n1:Props n2:name
{"contents": "```rescript\nstring\n```"}

Hover src/Hover.res 44:10
{"contents": "```rescript\nint\n```"}

Hover src/Hover.res 47:13
{"contents": "```rescript\nmodule Logger = {\n  let log: string => unit\n}\n```"}

Hover src/Hover.res 52:7
{"contents": "```rescript\nmodule Logger = {\n  let log: string => unit\n}\n```"}

Definition src/Hover.res 58:14
{"uri": "Hover.res", "range": {"start": {"line": 47, "character": 12}, "end": {"line": 47, "character": 18}}}

Hover src/Hover.res 61:9
{"contents": "```rescript\nmodule IdDefinedTwice = {\n  let y: int\n  let _x: int\n}\n```"}

Hover src/Hover.res 72:7
{"contents": "```rescript\nmodule A = {\n  let x: int\n}\n```"}

Hover src/Hover.res 75:7
{"contents": "```rescript\nmodule A = {\n  let x: int\n}\n```"}

Hover src/Hover.res 89:10
Nothing at that position. Now trying to use completion.
posCursor:[89:10] posNoWhite:[89:8] Found expr:[86:3->89:9]
JSX <Comp:[86:3->86:7] > _children:86:7
null

Hover src/Hover.res 96:10
Nothing at that position. Now trying to use completion.
posCursor:[96:10] posNoWhite:[96:9] Found expr:[93:3->96:10]
JSX <Comp1:[93:3->93:8] > _children:93:8
null

Hover src/Hover.res 101:25
{"contents": "```rescript\nfloat\n```"}

Hover src/Hover.res 104:21
{"contents": "```rescript\nint\n```"}

Hover src/Hover.res 114:16
{"contents": "```rescript\nAA.cond<[< #str(string)]> => AA.cond<[< #str(string)]>\n```"}

Hover src/Hover.res 117:25
{"contents": "```rescript\nAA.cond<[< #str(string)]> => AA.cond<[< #str(string)]>\n```"}

Hover src/Hover.res 120:3
Nothing at that position. Now trying to use completion.
Attribute id:live:[120:0->120:5] label:live
Completable: Cdecorator(live)
{"contents": "The `@live` decorator is for reanalyze, a static analysis tool for ReScript that can do dead code analysis.\n\n`@live` tells the dead code analysis that the value should be considered live, even though it might appear to be dead. This is typically used in case of FFI where there are indirect ways to access values. It can be added to everything that could otherwise be considered unused by the dead code analysis - values, functions, arguments, records, individual record fields, and so on.\n\n[Read more and see examples in the documentation](https://rescript-lang.org/syntax-lookup#live-decorator).\n\nHint: Did you know you can run an interactive code analysis in your project by running the command `> ReScript: Start Code Analyzer`? Try it!"}

Hover src/Hover.res 123:4
{"contents": "```rescript\n(. ()) => unit => int\n```"}

Hover src/Hover.res 129:4
{"contents": "```rescript\n(. ()) => (. ()) => int\n```"}

Hover src/Hover.res 132:4
{"contents": "```rescript\n(. unit, unit) => int\n```"}

Hover src/Hover.res 135:5
{"contents": "```rescript\n(. ()) => unit => int\n```"}

Hover src/Hover.res 142:9
{"contents": "```rescript\nint\n```\n\ndoc comment 1"}

Hover src/Hover.res 146:6
{"contents": "```rescript\nint\n```\n\n doc comment 2 "}

