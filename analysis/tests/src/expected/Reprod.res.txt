Complete src/Reprod.res 7:53
posCursor:[7:53] posNoWhite:[7:52] Found expr:[7:11->7:56]
Pexp_apply ...[7:11->7:20] (~variables7:22->7:31=...[7:32->7:55])
Completable: Cexpression CArgument Value[Query, use](~variables)->recordField(location), variantPayload::ByAddress($0)
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
--> expression completion
ContextPath CArgument Value[Query, use](~variables)
--> function argument: variables
ContextPath Value[Query, use]
Path Query.use
--> found function type
--> found function argument!
[extract_type]--> digging for type QueryFile.Types.variables in Reprod
[extract_type]--> found record
[nested_expr]--> trying to move into record field
[nested_expr]--> found record field type
[nested_expr]--> extracting from type location in env Reprod
[extract_type]--> digging for type location in Reprod
[extract_type]--> found nothing when digging
--> could not resolve nested expression path
[]

Complete src/Reprod.res 25:21
posCursor:[25:21] posNoWhite:[25:20] Found pattern:[25:18->25:22]
Ppat_construct Ok:[25:18->25:20]
posCursor:[25:21] posNoWhite:[25:20] Found pattern:[25:20->25:22]
Ppat_construct ():[25:20->25:22]
Completable: Cpattern Value[res]->variantPayload::Ok($0)
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[res]
Path res
[extract_type]--> digging for type Pervasives.result in Reprod
[extract_type]--> found type manifest
[extract_type]--> digging for type Belt.Result.t in Reprod
[extract_type]--> found variant
[nested_expr]--> trying to move into variant payload $0 of constructor 'Ok'
[nested_expr]--> found constructor (Args type)
[nested_expr]--> found arg of type: 'a
[extract_type]--> digging for type someVariant in Reprod
[extract_type]--> found variant
[nested_expr]--> extracted type, continuing descent
[nested_expr]--> reached end of pattern, returning type
[{
    "label": "One",
    "kind": 4,
    "tags": [],
    "detail": "One\n\ntype someVariant = One | Two(bool) | Three(someRecord, bool)",
    "documentation": null,
    "insertText": "One",
    "insertTextFormat": 2
  }, {
    "label": "Two(_)",
    "kind": 4,
    "tags": [],
    "detail": "Two(bool)\n\ntype someVariant = One | Two(bool) | Three(someRecord, bool)",
    "documentation": null,
    "insertText": "Two(${1:_})",
    "insertTextFormat": 2
  }, {
    "label": "Three(_, _)",
    "kind": 4,
    "tags": [],
    "detail": "Three(someRecord, bool)\n\ntype someVariant = One | Two(bool) | Three(someRecord, bool)",
    "documentation": null,
    "insertText": "Three(${1:_}, ${2:_})",
    "insertTextFormat": 2
  }]

Complete src/Reprod.res 28:24
posCursor:[28:24] posNoWhite:[28:23] Found pattern:[28:18->28:25]
Ppat_construct Error:[28:18->28:23]
posCursor:[28:24] posNoWhite:[28:23] Found pattern:[28:23->28:25]
Ppat_construct ():[28:23->28:25]
Completable: Cpattern Value[res]->variantPayload::Error($0)
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[res]
Path res
[extract_type]--> digging for type Pervasives.result in Reprod
[extract_type]--> found type manifest
[extract_type]--> digging for type Belt.Result.t in Reprod
[extract_type]--> found variant
[nested_expr]--> trying to move into variant payload $0 of constructor 'Error'
[nested_expr]--> found constructor (Args type)
[nested_expr]--> found arg of type: 'b
[extract_type]--> digging for type somePolyVariant in Reprod
[extract_type]--> found type manifest
[nested_expr]--> extracted type, continuing descent
[nested_expr]--> reached end of pattern, returning type
[{
    "label": "#one",
    "kind": 4,
    "tags": [],
    "detail": "#one\n\n[#one | #three(someRecord, bool) | #two(bool)]",
    "documentation": null,
    "insertText": "#one",
    "insertTextFormat": 2
  }, {
    "label": "#three(_, _)",
    "kind": 4,
    "tags": [],
    "detail": "#three(someRecord, bool)\n\n[#one | #three(someRecord, bool) | #two(bool)]",
    "documentation": null,
    "insertText": "#three(${1:_}, ${2:_})",
    "insertTextFormat": 2
  }, {
    "label": "#two(_)",
    "kind": 4,
    "tags": [],
    "detail": "#two(bool)\n\n[#one | #three(someRecord, bool) | #two(bool)]",
    "documentation": null,
    "insertText": "#two(${1:_})",
    "insertTextFormat": 2
  }]

