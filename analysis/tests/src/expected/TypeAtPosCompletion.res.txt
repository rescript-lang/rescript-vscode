Complete src/TypeAtPosCompletion.res 7:17
posCursor:[7:17] posNoWhite:[7:15] Found expr:[6:16->9:1]
Completable: Cexpression CTypeAtPos()->recordBody
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath CTypeAtPos()
[{
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age?: int\n\noptRecord",
    "documentation": null
  }, {
    "label": "online",
    "kind": 5,
    "tags": [],
    "detail": "online?: bool\n\noptRecord",
    "documentation": null
  }]

Complete src/TypeAtPosCompletion.res 16:18
posCursor:[16:18] posNoWhite:[16:16] Found expr:[13:8->19:1]
Pexp_construct One:[13:8->13:11] [13:11->19:1]
posCursor:[16:18] posNoWhite:[16:16] Found expr:[13:11->19:1]
posCursor:[16:18] posNoWhite:[16:16] Found expr:[15:2->18:3]
Completable: Cexpression CTypeAtPos()->variantPayload::One($1), recordBody
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath CTypeAtPos()
[{
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age?: int\n\noptRecord",
    "documentation": null
  }, {
    "label": "online",
    "kind": 5,
    "tags": [],
    "detail": "online?: bool\n\noptRecord",
    "documentation": null
  }]

Complete src/TypeAtPosCompletion.res 22:12
posCursor:[22:12] posNoWhite:[22:11] Found expr:[21:10->24:1]
Completable: Cexpression CTypeAtPos()->array
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath CTypeAtPos()
[{
    "label": "{}",
    "kind": 12,
    "tags": [],
    "detail": "optRecord",
    "documentation": null,
    "sortText": "A",
    "insertText": "{$0}",
    "insertTextFormat": 2
  }]

Complete src/TypeAtPosCompletion.res 38:5
posCursor:[38:5] posNoWhite:[38:4] Found expr:[37:12->0:-1]
Completable: Cpath Value[Belt, Option, getExn](Nolabel)->
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[Belt, Option, getExn](Nolabel)->
ContextPath Value[Belt, Option, getExn](Nolabel)
ContextPath Value[Belt, Option, getExn]
Path Belt.Option.getExn
CPPipe env:TypeAtPosCompletion envFromCompletionItem:Belt_Option
Path Belt.Int.
[{
    "label": "Belt.Int.fromString",
    "kind": 12,
    "tags": [],
    "detail": "string => option<int>",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `string` to an `int`. Returns `Some(int)` when the input is a number, `None` otherwise.\n\n  ```res example\n  Js.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.*",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Multiplication of two `int` values. Same as the multiplication from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 * 2 === 4) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int./",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Division of two `int` values. Same as the division from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(4 / 2 === 2); /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toFloat",
    "kind": 12,
    "tags": [],
    "detail": "int => float",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `float`.\n\n  ```res example\n  Js.log(Belt.Int.toFloat(1) === 1.0) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.fromFloat",
    "kind": 12,
    "tags": [],
    "detail": "float => int",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `float` to an `int`.\n\n  ```res example\n  Js.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.-",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Subtraction of two `int` values. Same as the subtraction from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 - 1 === 1) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.+",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Addition of two `int` values. Same as the addition from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 + 2 === 4) /* true */\n  ```\n"}
  }]

