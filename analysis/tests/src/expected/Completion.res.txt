Complete tests/src/Completion.res 1:11
posCursor:[1:11] posNoWhite:[1:10] Found expr:[1:3->1:11]
Pexp_ident MyList.m:[1:3->1:11]
Completable: Cpath Value[MyList, m]
[{
    "label": "mapReverse",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\n  `mapReverse xs f`\n\n  Equivalent to `reverse (map xs f)`\n\n  ```\n  mapReverse [3;4;5] (fun x -> x * x) = [25;16;9];;\n  ```\n"}
  }, {
    "label": "makeBy",
    "kind": 12,
    "tags": [],
    "detail": "(int, int => 'a) => t<'a>",
    "documentation": {"kind": "markdown", "value": "\n  `makeBy n f`\n\n  **return** a list of length `n` with element `i` initialized with `f i`\n\n  **return** the empty list if `n` is negative\n\n  ```\n  makeBy 5 (fun i -> i) = [0;1;2;3;4];;\n  makeBy 5 (fun i -> i * i) = [0;1;4;9;16];;\n  ```\n"}
  }, {
    "label": "make",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => t<'a>",
    "documentation": {"kind": "markdown", "value": "\n  `make n v`\n\n  **return** a list of length `n` with each element filled with value `v`\n\n  **return** the empty list if `n` is negative\n\n  ```\n  make 3 1 =  [1;1;1]\n  ```\n"}
  }, {
    "label": "mapReverse2U",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, t<'b>, (. 'a, 'b) => 'c) => t<'c>",
    "documentation": null
  }, {
    "label": "map",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\n  `map xs f`\n\n  **return** the list obtained by applying `f` to each element of `xs`\n\n  ```\n  map [1;2] (fun x-> x + 1) = [3;4]\n  ```\n"}
  }, {
    "label": "mapWithIndexU",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (. int, 'a) => 'b) => t<'b>",
    "documentation": null
  }, {
    "label": "mapU",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (. 'a) => 'b) => t<'b>",
    "documentation": null
  }, {
    "label": "makeByU",
    "kind": 12,
    "tags": [],
    "detail": "(int, (. int) => 'a) => t<'a>",
    "documentation": null
  }, {
    "label": "mapReverse2",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, t<'b>, ('a, 'b) => 'c) => t<'c>",
    "documentation": {"kind": "markdown", "value": "\n  `mapReverse2 xs ys f`\n\n  equivalent to `reverse (zipBy xs ys f)`\n\n  ```\n  mapReverse2 [1;2;3] [1;2] (+) = [4;2]\n  ```\n"}
  }, {
    "label": "mapWithIndex",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (int, 'a) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\n  `mapWithIndex xs f` applies `f` to each element of `xs`. Function `f` takes two arguments:\n  the index starting from 0 and the element from `xs`.\n\n  ```\n  mapWithIndex [1;2;3] (fun i x -> i + x) =\n    [0 + 1; 1 + 2; 2 + 3 ]\n  ```\n"}
  }, {
    "label": "mapReverseU",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (. 'a) => 'b) => t<'b>",
    "documentation": null
  }]

Complete tests/src/Completion.res 3:9
posCursor:[3:9] posNoWhite:[3:8] Found expr:[3:3->8:6]
Pexp_ident Array.:[3:3->8:6]
Id breaks up. New path:Array.
Completable: Cpath Value[Array, ""]
[{
    "label": "fold_left",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => 'a, 'a, array<'b>) => 'a",
    "documentation": {"kind": "markdown", "value": " [Array.fold_left f x a] computes\n   [f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)],\n   where [n] is the length of the array [a]. "}
  }, {
    "label": "concat",
    "kind": 12,
    "tags": [],
    "detail": "list<array<'a>> => array<'a>",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.append}, but concatenates a list of arrays. "}
  }, {
    "label": "mapi",
    "kind": 12,
    "tags": [],
    "detail": "((int, 'a) => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.map}, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument. "}
  }, {
    "label": "exists",
    "kind": 12,
    "tags": [],
    "detail": "('a => bool, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [Array.exists p [|a1; ...; an|]] checks if at least one element of\n    the array satisfies the predicate [p]. That is, it returns\n    [(p a1) || (p a2) || ... || (p an)].\n    @since 4.03.0 "}
  }, {
    "label": "for_all",
    "kind": 12,
    "tags": [],
    "detail": "('a => bool, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [Array.for_all p [|a1; ...; an|]] checks if all elements of the array\n   satisfy the predicate [p]. That is, it returns\n   [(p a1) && (p a2) && ... && (p an)].\n   @since 4.03.0 "}
  }, {
    "label": "copy",
    "kind": 12,
    "tags": [],
    "detail": "array<'a> => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.copy a] returns a copy of [a], that is, a fresh array\n   containing the same elements as [a]. "}
  }, {
    "label": "iter2",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => unit, array<'a>, array<'b>) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.iter2 f a b] applies function [f] to all the elements of [a]\n   and [b].\n   Raise [Invalid_argument] if the arrays are not the same size.\n   @since 4.03.0 "}
  }, {
    "label": "to_list",
    "kind": 12,
    "tags": [],
    "detail": "array<'a> => list<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.to_list a] returns the list of all the elements of [a]. "}
  }, {
    "label": "stable_sort",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'a) => int, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.sort}, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.\n\n   The current implementation uses Merge Sort. It uses [n/2]\n   words of heap space, where [n] is the length of the array.\n   It is usually faster than the current implementation of {!Array.sort}.\n"}
  }, {
    "label": "iteri",
    "kind": 12,
    "tags": [],
    "detail": "((int, 'a) => unit, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.iter}, but the\n   function is applied with the index of the element as first argument,\n   and the element itself as second argument. "}
  }, {
    "label": "memq",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.mem}, but uses physical equality instead of structural\n   equality to compare array elements.\n   @since 4.03.0 "}
  }, {
    "label": "map2",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => 'c, array<'a>, array<'b>) => array<'c>",
    "documentation": {"kind": "markdown", "value": " [Array.map2 f a b] applies function [f] to all the elements of [a]\n   and [b], and builds an array with the results returned by [f]:\n   [[| f a.(0) b.(0); ...; f a.(Array.length a - 1) b.(Array.length b - 1)|]].\n   Raise [Invalid_argument] if the arrays are not the same size.\n   @since 4.03.0 "}
  }, {
    "label": "set",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, 'a) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.set a n x] modifies array [a] in place, replacing\n   element number [n] with [x].\n   You can also write [a.(n) <- x] instead of [Array.set a n x].\n\n   Raise [Invalid_argument \"index out of bounds\"]\n   if [n] is outside the range 0 to [Array.length a - 1]. "}
  }, {
    "label": "make",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.make n x] returns a fresh array of length [n],\n   initialized with [x].\n   All the elements of this new array are initially\n   physically equal to [x] (in the sense of the [==] predicate).\n   Consequently, if [x] is mutable, it is shared among all elements\n   of the array, and modifying [x] through one of the array entries\n   will modify all other entries at the same time.\n\n   Raise [Invalid_argument] if [n < 0] or [n > Sys.max_array_length].\n   If the value of [x] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]."}
  }, {
    "label": "make_float",
    "kind": 12,
    "tags": [],
    "detail": "int => array<float>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.make_float] is an alias for {!Array.create_float}. "}
  }, {
    "label": "fold_right",
    "kind": 12,
    "tags": [],
    "detail": "(('b, 'a) => 'a, array<'b>, 'a) => 'a",
    "documentation": {"kind": "markdown", "value": " [Array.fold_right f a x] computes\n   [f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))],\n   where [n] is the length of the array [a]. "}
  }, {
    "label": "sort",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'a) => int, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, {!Pervasives.compare} is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling [Array.sort], the\n   array is sorted in place in increasing order.\n   [Array.sort] is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.\n\n   The current implementation uses Heap Sort.  It runs in constant\n   stack space.\n\n   Specification of the comparison function:\n   Let [a] be the array and [cmp] the comparison function.  The following\n   must be true for all x, y, z in a :\n-   [cmp x y] > 0 if and only if [cmp y x] < 0\n-   if [cmp x y] >= 0 and [cmp y z] >= 0 then [cmp x z] >= 0\n\n   When [Array.sort] returns, [a] contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of [a] :\n-   [cmp a.(i) a.(j)] >= 0 if and only if i >= j\n"}
  }, {
    "label": "length",
    "kind": 12,
    "tags": [],
    "detail": "array<'a> => int",
    "documentation": {"kind": "markdown", "value": " Return the length (number of elements) of the given array. "}
  }, {
    "label": "sub",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, int) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.sub a start len] returns a fresh array of length [len],\n   containing the elements number [start] to [start + len - 1]\n   of array [a].\n\n   Raise [Invalid_argument \"Array.sub\"] if [start] and [len] do not\n   designate a valid subarray of [a]; that is, if\n   [start < 0], or [len < 0], or [start + len > Array.length a]. "}
  }, {
    "label": "of_list",
    "kind": 12,
    "tags": [],
    "detail": "list<'a> => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.of_list l] returns a fresh array containing the elements\n   of [l]. "}
  }, {
    "label": "iter",
    "kind": 12,
    "tags": [],
    "detail": "('a => unit, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.iter f a] applies function [f] in turn to all\n   the elements of [a].  It is equivalent to\n   [f a.(0); f a.(1); ...; f a.(Array.length a - 1); ()]. "}
  }, {
    "label": "map",
    "kind": 12,
    "tags": [],
    "detail": "('a => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " [Array.map f a] applies function [f] to all the elements of [a],\n   and builds an array with the results returned by [f]:\n   [[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]]. "}
  }, {
    "label": "unsafe_get",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int) => 'a",
    "documentation": null
  }, {
    "label": "make_matrix",
    "kind": 12,
    "tags": [],
    "detail": "(int, int, 'a) => array<array<'a>>",
    "documentation": {"kind": "markdown", "value": " [Array.make_matrix dimx dimy e] returns a two-dimensional array\n   (an array of arrays) with first dimension [dimx] and\n   second dimension [dimy]. All the elements of this new matrix\n   are initially physically equal to [e].\n   The element ([x,y]) of a matrix [m] is accessed\n   with the notation [m.(x).(y)].\n\n   Raise [Invalid_argument] if [dimx] or [dimy] is negative or\n   greater than {!Sys.max_array_length}.\n   If the value of [e] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]. "}
  }, {
    "label": "mem",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [mem a l] is true if and only if [a] is equal\n   to an element of [l].\n   @since 4.03.0 "}
  }, {
    "label": "get",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int) => 'a",
    "documentation": {"kind": "markdown", "value": " [Array.get a n] returns the element number [n] of array [a].\n   The first element has number 0.\n   The last element has number [Array.length a - 1].\n   You can also write [a.(n)] instead of [Array.get a n].\n\n   Raise [Invalid_argument \"index out of bounds\"]\n   if [n] is outside the range 0 to [(Array.length a - 1)]. "}
  }, {
    "label": "append",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, array<'a>) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.append v1 v2] returns a fresh array containing the\n   concatenation of the arrays [v1] and [v2]. "}
  }, {
    "label": "unsafe_set",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, 'a) => unit",
    "documentation": null
  }, {
    "label": "create_matrix",
    "kind": 12,
    "tags": [],
    "detail": "(int, int, 'a) => array<array<'a>>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.create_matrix] is an alias for {!Array.make_matrix}. "}
  }, {
    "label": "create_float",
    "kind": 12,
    "tags": [],
    "detail": "int => array<float>",
    "documentation": {"kind": "markdown", "value": " [Array.create_float n] returns a fresh float array of length [n],\n    with uninitialized data.\n    @since 4.03 "}
  }, {
    "label": "create",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.create] is an alias for {!Array.make}. "}
  }, {
    "label": "init",
    "kind": 12,
    "tags": [],
    "detail": "(int, int => 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.init n f] returns a fresh array of length [n],\n   with element number [i] initialized to the result of [f i].\n   In other terms, [Array.init n f] tabulates the results of [f]\n   applied to the integers [0] to [n-1].\n\n   Raise [Invalid_argument] if [n < 0] or [n > Sys.max_array_length].\n   If the return type of [f] is [float], then the maximum\n   size is only [Sys.max_array_length / 2]."}
  }, {
    "label": "fast_sort",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'a) => int, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.sort} or {!Array.stable_sort}, whichever is faster\n    on typical input.\n"}
  }, {
    "label": "fill",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, int, 'a) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.fill a ofs len x] modifies the array [a] in place,\n   storing [x] in elements number [ofs] to [ofs + len - 1].\n\n   Raise [Invalid_argument \"Array.fill\"] if [ofs] and [len] do not\n   designate a valid subarray of [a]. "}
  }, {
    "label": "blit",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, array<'a>, int, int) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.blit v1 o1 v2 o2 len] copies [len] elements\n   from array [v1], starting at element number [o1], to array [v2],\n   starting at element number [o2]. It works correctly even if\n   [v1] and [v2] are the same array, and the source and\n   destination chunks overlap.\n\n   Raise [Invalid_argument \"Array.blit\"] if [o1] and [len] do not\n   designate a valid subarray of [v1], or if [o2] and [len] do not\n   designate a valid subarray of [v2]. "}
  }, {
    "label": "Floatarray",
    "kind": 9,
    "tags": [],
    "detail": "module",
    "documentation": null
  }]

Complete tests/src/Completion.res 5:10
posCursor:[5:10] posNoWhite:[5:9] Found expr:[5:3->5:10]
Pexp_ident Array.m:[5:3->5:10]
Completable: Cpath Value[Array, m]
[{
    "label": "mapi",
    "kind": 12,
    "tags": [],
    "detail": "((int, 'a) => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.map}, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument. "}
  }, {
    "label": "memq",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.mem}, but uses physical equality instead of structural\n   equality to compare array elements.\n   @since 4.03.0 "}
  }, {
    "label": "map2",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => 'c, array<'a>, array<'b>) => array<'c>",
    "documentation": {"kind": "markdown", "value": " [Array.map2 f a b] applies function [f] to all the elements of [a]\n   and [b], and builds an array with the results returned by [f]:\n   [[| f a.(0) b.(0); ...; f a.(Array.length a - 1) b.(Array.length b - 1)|]].\n   Raise [Invalid_argument] if the arrays are not the same size.\n   @since 4.03.0 "}
  }, {
    "label": "make",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.make n x] returns a fresh array of length [n],\n   initialized with [x].\n   All the elements of this new array are initially\n   physically equal to [x] (in the sense of the [==] predicate).\n   Consequently, if [x] is mutable, it is shared among all elements\n   of the array, and modifying [x] through one of the array entries\n   will modify all other entries at the same time.\n\n   Raise [Invalid_argument] if [n < 0] or [n > Sys.max_array_length].\n   If the value of [x] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]."}
  }, {
    "label": "make_float",
    "kind": 12,
    "tags": [],
    "detail": "int => array<float>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.make_float] is an alias for {!Array.create_float}. "}
  }, {
    "label": "map",
    "kind": 12,
    "tags": [],
    "detail": "('a => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " [Array.map f a] applies function [f] to all the elements of [a],\n   and builds an array with the results returned by [f]:\n   [[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]]. "}
  }, {
    "label": "make_matrix",
    "kind": 12,
    "tags": [],
    "detail": "(int, int, 'a) => array<array<'a>>",
    "documentation": {"kind": "markdown", "value": " [Array.make_matrix dimx dimy e] returns a two-dimensional array\n   (an array of arrays) with first dimension [dimx] and\n   second dimension [dimy]. All the elements of this new matrix\n   are initially physically equal to [e].\n   The element ([x,y]) of a matrix [m] is accessed\n   with the notation [m.(x).(y)].\n\n   Raise [Invalid_argument] if [dimx] or [dimy] is negative or\n   greater than {!Sys.max_array_length}.\n   If the value of [e] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]. "}
  }, {
    "label": "mem",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [mem a l] is true if and only if [a] is equal\n   to an element of [l].\n   @since 4.03.0 "}
  }]

Complete tests/src/Completion.res 15:17
posCursor:[15:17] posNoWhite:[15:16] Found expr:[15:12->15:17]
Pexp_ident Dep.c:[15:12->15:17]
Completable: Cpath Value[Dep, c]
[{
    "label": "customDouble",
    "kind": 12,
    "tags": [1],
    "detail": "int => int",
    "documentation": {"kind": "markdown", "value": "Deprecated: Use customDouble instead\n\nSome doc comment"}
  }]

Complete tests/src/Completion.res 23:20
posCursor:[23:20] posNoWhite:[23:19] Found expr:[23:11->23:20]
Pexp_apply ...[23:11->23:18] ()
Completable: Clabel([Lib, foo], "", [])
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }, {
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }]

Complete tests/src/Completion.res 26:13
posCursor:[26:13] posNoWhite:[26:12] Found expr:[26:3->26:13]
posCursor:[26:13] posNoWhite:[26:12] Found expr:[26:12->26:13]
Pexp_ident m:[26:12->26:13]
Completable: Cpath array->m
[{
    "label": "Js.Array2.mapi",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, ('a, int) => 'b) => t<'b>",
    "documentation": null
  }, {
    "label": "Js.Array2.map",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": null
  }]

Complete tests/src/Completion.res 29:13
posCursor:[29:13] posNoWhite:[29:12] Found expr:[29:3->29:13]
posCursor:[29:13] posNoWhite:[29:12] Found expr:[29:10->29:13]
Pexp_ident toU:[29:10->29:13]
Completable: Cpath string->toU
[{
    "label": "Js.String2.toUpperCase",
    "kind": 12,
    "tags": [],
    "detail": "t => t",
    "documentation": {"kind": "markdown", "value": "\n  `toUpperCase str` converts `str` to upper case using the locale-insensitive case mappings in the Unicode Character Database. Notice that the conversion can expand the number of letters in the result; for example the German `ß` capitalizes to two `S`es in a row.\n\n  ```\n  toUpperCase \"abc\" = \"ABC\";;\n  toUpperCase {js|Straße|js} = {js|STRASSE|js};;\n  toLowerCase {js|πς|js} = {js|ΠΣ|js};;\n  ```\n"}
  }]

Complete tests/src/Completion.res 34:8
posCursor:[34:8] posNoWhite:[34:7] Found expr:[34:3->34:8]
posCursor:[34:8] posNoWhite:[34:7] Found expr:[34:7->34:8]
Pexp_ident e:[34:7->34:8]
Completable: Cpath Value[op]->e
[{
    "label": "Belt.Option.eqU",
    "kind": 12,
    "tags": [],
    "detail": "(option<'a>, option<'b>, (. 'a, 'b) => bool) => bool",
    "documentation": {"kind": "markdown", "value": "\n   Uncurried version of `eq`\n"}
  }, {
    "label": "Belt.Option.eq",
    "kind": 12,
    "tags": [],
    "detail": "(option<'a>, option<'b>, ('a, 'b) => bool) => bool",
    "documentation": {"kind": "markdown", "value": "\n   `eq optValue1 optvalue2 predicate`\n\n   Evaluates two optional values for equality with respect to a predicate function.\n\n   If both `optValue1` and `optValue2` are `None`, returns `true`.\n\n   If one of the arguments is `Some value` and the other is `None`, returns `false`\n\n   If arguments are `Some value1` and `Some value2`, returns the result of `predicate value1 value2`;\n   the `predicate` function must return a `bool`\n\n   ```\n   let clockEqual = (fun a b -> a mod 12 = b mod 12);;\n   eq (Some 3) (Some 15) clockEqual = true;;\n   eq (Some 3) None clockEqual = false;;\n   eq None (Some 3) clockEqual = false;;\n   eq None None clockEqual = true;;\n   ```\n"}
  }]

Complete tests/src/Completion.res 44:7
posCursor:[44:7] posNoWhite:[44:6] Found expr:[44:3->54:3]
Pexp_apply ...[50:9->50:10] (...[44:3->50:8], ...[51:2->54:3])
posCursor:[44:7] posNoWhite:[44:6] Found expr:[44:3->50:8]
posCursor:[44:7] posNoWhite:[44:6] Found expr:[44:5->44:7]
Pexp_ident |.:[44:5->44:7]
Completable: Cpath Value[fa]->
[{
    "label": "ForAuto.abc",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null
  }, {
    "label": "ForAuto.abd",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null
  }]

Complete tests/src/Completion.res 47:21
posCursor:[47:21] posNoWhite:[47:20] Found expr:[47:3->47:21]
posCursor:[47:21] posNoWhite:[47:20] Found expr:[47:12->47:21]
Pexp_ident Js.Dict.u:[47:12->47:21]
Completable: Cpath Value[Js, Dict, u]
[{
    "label": "unsafeGet",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, key) => 'a",
    "documentation": {"kind": "markdown", "value": "\n  `unsafeGet dict key` return the value if the `key` exists,\n  otherwise an **undefined** value is returned. Must be used only\n  when the existence of a key is certain. (i.e. when having called `keys`\n  function previously.\n\n  ```\n  Array.iter (fun key -> Js.log (Js_dict.unsafeGet dic key)) (Js_dict.keys dict)\n  ```\n"}
  }, {
    "label": "unsafeDeleteKey",
    "kind": 12,
    "tags": [],
    "detail": "(. t<string>, string) => unit",
    "documentation": {"kind": "markdown", "value": " Experimental internal function "}
  }]

Complete tests/src/Completion.res 59:30
posCursor:[59:30] posNoWhite:[59:29] Found expr:[59:15->59:30]
JSX <O,Comp:[59:15->59:21] second[59:22->59:28]=...[59:29->59:30]> _children:None
posCursor:[59:30] posNoWhite:[59:29] Found expr:[59:29->59:30]
Pexp_ident z:[59:29->59:30]
Completable: Cpath Value[z]
[{
    "label": "zzz",
    "kind": 12,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 62:23
posCursor:[62:23] posNoWhite:[62:22] Found expr:[62:15->62:23]
JSX <O,Comp:[62:15->62:21] z[62:22->62:23]=...[62:22->62:23]> _children:None
posCursor:[62:23] posNoWhite:[62:22] Found expr:[62:22->62:23]
Pexp_ident z:[62:22->62:23]
Completable: Cjsx([O, Comp], z, [z])
[{
    "label": "zoo",
    "kind": 4,
    "tags": [],
    "detail": "option<int>",
    "documentation": null
  }]

DocumentSymbol tests/src/Completion.res
[
{
        "name": "MyList",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 25}}}
},
{
        "name": "Dep",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 8, "character": 7}, "end": {"line": 13, "character": 1}}}
},
{
        "name": "customDouble",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 12, "character": 2}, "end": {"line": 12, "character": 35}}}
},
{
        "name": "Lib",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 18, "character": 7}, "end": {"line": 21, "character": 1}}}
},
{
        "name": "foo",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 19, "character": 2}, "end": {"line": 19, "character": 55}}}
},
{
        "name": "next",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 20, "character": 2}, "end": {"line": 20, "character": 48}}}
},
{
        "name": "op",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 16}}}
},
{
        "name": "ForAuto",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 37, "character": 7}, "end": {"line": 41, "character": 1}}}
},
{
        "name": "t",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 38, "character": 2}, "end": {"line": 38, "character": 14}}}
},
{
        "name": "abc",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 39, "character": 2}, "end": {"line": 39, "character": 32}}}
},
{
        "name": "abd",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 40, "character": 2}, "end": {"line": 40, "character": 32}}}
},
{
        "name": "fa",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 43, "character": 0}, "end": {"line": 43, "character": 22}}}
},
{
        "name": "O",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 50, "character": 7}, "end": {"line": 55, "character": 1}}}
},
{
        "name": "Comp",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 51, "character": 9}, "end": {"line": 54, "character": 3}}}
},
{
        "name": "make",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 53, "character": 4}, "end": {"line": 53, "character": 98}}}
},
{
        "name": "zzz",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 57, "character": 0}, "end": {"line": 57, "character": 12}}}
},
{
        "name": "someObj",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 90, "character": 0}, "end": {"line": 90, "character": 38}}}
},
{
        "name": "nestedObj",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 95, "character": 0}, "end": {"line": 95, "character": 54}}}
},
{
        "name": "o",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 100, "character": 0}, "end": {"line": 100, "character": 30}}}
},
{
        "name": "nestedObjT",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 104, "character": 0}, "end": {"line": 104, "character": 39}}}
},
{
        "name": "no",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 105, "character": 0}, "end": {"line": 105, "character": 33}}}
},
{
        "name": "r",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 109, "character": 0}, "end": {"line": 109, "character": 28}}}
},
{
        "name": "x",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 109, "character": 10}, "end": {"line": 109, "character": 16}}}
},
{
        "name": "y",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 109, "character": 18}, "end": {"line": 109, "character": 27}}}
},
{
        "name": "rAlias",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 110, "character": 0}, "end": {"line": 110, "character": 15}}}
},
{
        "name": "r",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 111, "character": 0}, "end": {"line": 111, "character": 28}}}
},
{
        "name": "myAmazingFunction",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 118, "character": 0}, "end": {"line": 118, "character": 39}}}
},
{
        "name": "make",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 121, "character": 0}, "end": {"line": 125, "character": 1}}}
},
{
        "name": "foo",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 130, "character": 0}, "end": {"line": 149, "character": 1}}}
},
{
        "name": "x",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 131, "character": 2}, "end": {"line": 133, "character": 3}}}
},
{
        "name": "y",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 134, "character": 2}, "end": {"line": 134, "character": 11}}}
},
{
        "name": "add",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 135, "character": 2}, "end": {"line": 139, "character": 5}}}
},
{
        "name": "z",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 140, "character": 2}, "end": {"line": 140, "character": 22}}}
},
{
        "name": "Inner",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 142, "character": 2}, "end": {"line": 145, "character": 3}}}
},
{
        "name": "z",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 143, "character": 4}, "end": {"line": 143, "character": 16}}}
},
{
        "name": "v",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 144, "character": 4}, "end": {"line": 144, "character": 14}}}
},
{
        "name": "MyException",
        "kind": 9,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 146, "character": 2}, "end": {"line": 146, "character": 61}}}
},
{
        "name": "MyOtherException",
        "kind": 9,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 151, "character": 0}, "end": {"line": 151, "character": 26}}}
},
{
        "name": "aa",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 156, "character": 0}, "end": {"line": 156, "character": 32}}}
},
{
        "name": "x",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 156, "character": 11}, "end": {"line": 156, "character": 17}}}
},
{
        "name": "name",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 156, "character": 19}, "end": {"line": 156, "character": 31}}}
},
{
        "name": "bb",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 157, "character": 0}, "end": {"line": 157, "character": 26}}}
},
{
        "name": "aa",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 157, "character": 11}, "end": {"line": 157, "character": 17}}}
},
{
        "name": "w",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 157, "character": 19}, "end": {"line": 157, "character": 25}}}
},
{
        "name": "q",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 158, "character": 0}, "end": {"line": 158, "character": 24}}}
},
{
        "name": "WithChildren",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 167, "character": 7}, "end": {"line": 170, "character": 1}}}
},
{
        "name": "make",
        "kind": 12,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 169, "character": 2}, "end": {"line": 169, "character": 69}}}
},
{
        "name": "z",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 179, "character": 0}, "end": {"line": 179, "character": 30}}}
},
{
        "name": "Allo",
        "kind": 22,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 179, "character": 9}, "end": {"line": 179, "character": 13}}}
},
{
        "name": "Asterix",
        "kind": 22,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 179, "character": 14}, "end": {"line": 179, "character": 23}}}
},
{
        "name": "Baba",
        "kind": 22,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 179, "character": 24}, "end": {"line": 179, "character": 30}}}
},
{
        "name": "Private",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 187, "character": 7}, "end": {"line": 190, "character": 1}}}
},
{
        "name": "awr",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 188, "character": 12}, "end": {"line": 188, "character": 23}}}
},
{
        "name": "b",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 189, "character": 2}, "end": {"line": 189, "character": 13}}}
},
{
        "name": "Shadow",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 195, "character": 7}, "end": {"line": 202, "character": 1}}}
},
{
        "name": "A",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 196, "character": 9}, "end": {"line": 198, "character": 3}}}
},
{
        "name": "shadowed",
        "kind": 16,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 197, "character": 4}, "end": {"line": 197, "character": 20}}}
},
{
        "name": "B",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 199, "character": 9}, "end": {"line": 201, "character": 3}}}
},
{
        "name": "shadowed",
        "kind": 15,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 200, "character": 4}, "end": {"line": 200, "character": 21}}}
},
{
        "name": "FAR",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 214, "character": 7}, "end": {"line": 217, "character": 1}}}
},
{
        "name": "forAutoRecord",
        "kind": 26,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 215, "character": 2}, "end": {"line": 215, "character": 67}}}
},
{
        "name": "forAuto",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 215, "character": 24}, "end": {"line": 215, "character": 42}}}
},
{
        "name": "something",
        "kind": 7,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 215, "character": 44}, "end": {"line": 215, "character": 66}}}
},
{
        "name": "forAutoRecord",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 216, "character": 2}, "end": {"line": 216, "character": 49}}}
},
{
        "name": "FAO",
        "kind": 2,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 219, "character": 7}, "end": {"line": 221, "character": 1}}}
},
{
        "name": "forAutoObject",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 220, "character": 2}, "end": {"line": 220, "character": 68}}}
},
{
        "name": "name",
        "kind": 15,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 235, "character": 0}, "end": {"line": 235, "character": 16}}}
},
{
        "name": "notHere",
        "kind": 15,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 239, "character": 0}, "end": {"line": 239, "character": 22}}}
},
{
        "name": "someR",
        "kind": 13,
        "location": {"uri": "Completion.res", "range": {"start": {"line": 242, "character": 0}, "end": {"line": 242, "character": 19}}}
}
]

Complete tests/src/Completion.res 67:8
Attribute id:reac:[67:3->67:8] label:reac
Completable: Cdecorator(reac)
[{
    "label": "react.component",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }]

Complete tests/src/Completion.res 70:10
posCursor:[70:10] posNoWhite:[70:9] Found expr:[0:-1->88:1]
Pexp_apply ...[82:6->82:7] (...[82:8->88:1])
Attribute id:react.let:[70:3->82:3] label:react.
Completable: Cdecorator(react.)
[{
    "label": "component",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }]

Complete tests/src/Completion.res 73:27
posCursor:[73:27] posNoWhite:[73:26] Found expr:[73:11->73:27]
Pexp_apply ...[73:11->73:18] (~name73:20->73:24=...[73:20->73:24])
Completable: Clabel([Lib, foo], "", [name])
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 76:26
posCursor:[76:26] posNoWhite:[76:25] Found expr:[76:11->76:26]
Pexp_apply ...[76:11->76:18] (~age76:20->76:23=...[76:20->76:23])
Completable: Clabel([Lib, foo], "", [age])
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }]

Complete tests/src/Completion.res 79:32
posCursor:[79:32] posNoWhite:[79:31] Found expr:[79:11->79:32]
Pexp_apply ...[79:11->79:18] (~age79:20->79:23=...[79:25->79:28])
Completable: Clabel([Lib, foo], "", [age])
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }]

Complete tests/src/Completion.res 84:5
posCursor:[84:5] posNoWhite:[84:4] Found expr:[82:8->88:1]
Pexp_apply ...[82:8->82:15] (~age86:3->86:6=...[86:7->86:8], ~name87:3->87:7=...[87:8->87:10])
Completable: Clabel([Lib, foo], "", [age, name])
[]

Complete tests/src/Completion.res 92:13
posCursor:[92:13] posNoWhite:[92:12] Found expr:[92:3->95:18]
Pexp_send a[92:12->92:13] e:[92:3->92:10]
Completable: Cpath Value[someObj]["a"]
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 97:24
posCursor:[97:24] posNoWhite:[97:23] Found expr:[97:3->101:6]
Pexp_send [97:24->97:24] e:[97:3->97:22]
Completable: Cpath Value[nestedObj]["x"]["y"][""]
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }, {
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }]

Complete tests/src/Completion.res 101:7
posCursor:[101:7] posNoWhite:[101:6] Found expr:[101:3->104:20]
Pexp_send a[101:6->101:7] e:[101:3->101:4]
Completable: Cpath Value[o]["a"]
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 106:17
posCursor:[106:17] posNoWhite:[106:16] Found expr:[106:3->127:15]
Pexp_send [106:17->106:17] e:[106:3->106:15]
Completable: Cpath Value[no]["x"]["y"][""]
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }, {
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 112:5
posCursor:[112:5] posNoWhite:[112:4] Found expr:[112:3->118:3]
Pexp_field [112:3->112:4] _:[118:0->118:3]
Completable: Cpath Value[r].""
[{
    "label": "x",
    "kind": 5,
    "tags": [],
    "detail": "x: int\n\ntype r = {x: int, y: string}",
    "documentation": null
  }, {
    "label": "y",
    "kind": 5,
    "tags": [],
    "detail": "y: string\n\ntype r = {x: int, y: string}",
    "documentation": null
  }]

Complete tests/src/Completion.res 115:21
posCursor:[115:21] posNoWhite:[115:20] Found expr:[115:3->118:3]
Pexp_field [115:3->115:20] _:[118:0->118:3]
Completable: Cpath Value[Obj, Rec, recordVal].""
[{
    "label": "xx",
    "kind": 5,
    "tags": [],
    "detail": "xx: int\n\ntype recordt = {xx: int, ss: string}",
    "documentation": null
  }, {
    "label": "ss",
    "kind": 5,
    "tags": [],
    "detail": "ss: string\n\ntype recordt = {xx: int, ss: string}",
    "documentation": null
  }]

Complete tests/src/Completion.res 122:7
posCursor:[122:7] posNoWhite:[122:6] Found expr:[121:11->125:1]
posCursor:[122:7] posNoWhite:[122:6] Found expr:[122:5->124:5]
posCursor:[122:7] posNoWhite:[122:6] Found expr:[122:5->122:7]
Pexp_ident my:[122:5->122:7]
Completable: Cpath Value[my]
[{
    "label": "myAmazingFunction",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": null
  }]

Complete tests/src/Completion.res 127:15
posCursor:[127:15] posNoWhite:[127:14] Found expr:[127:3->147:32]
Pexp_send [127:15->127:15] e:[127:3->127:13]
Completable: Cpath Value[Obj, object][""]
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }, {
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 153:6
posCursor:[153:6] posNoWhite:[153:5] Found expr:[153:4->153:6]
JSX <O,:[153:4->153:6] > _children:None
posCursor:[153:6] posNoWhite:[153:5] Found expr:[153:4->153:6]
Pexp_ident O..createElement:[153:4->153:6]
Id breaks up. New path:O..
Completable: Cpath Module[O, ""]
[{
    "label": "Comp",
    "kind": 9,
    "tags": [],
    "detail": "module",
    "documentation": null
  }]

Complete tests/src/Completion.res 159:8
posCursor:[159:8] posNoWhite:[159:7] Found expr:[159:3->167:6]
Pexp_field [159:3->159:7] _:[167:0->167:6]
Completable: Cpath Value[q].aa.""
[{
    "label": "x",
    "kind": 5,
    "tags": [],
    "detail": "x: int\n\ntype aa = {x: int, name: string}",
    "documentation": null
  }, {
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype aa = {x: int, name: string}",
    "documentation": null
  }]

Complete tests/src/Completion.res 161:9
posCursor:[161:9] posNoWhite:[161:8] Found expr:[161:3->161:9]
Pexp_field [161:3->161:7] n:[161:8->161:9]
Completable: Cpath Value[q].aa.n
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype aa = {x: int, name: string}",
    "documentation": null
  }]

Complete tests/src/Completion.res 164:6
posCursor:[164:6] posNoWhite:[164:5] Found expr:[164:3->164:6]
Pexp_construct Lis:[164:3->164:6] None
Completable: Cpath Value[Lis]
[{
    "label": "List",
    "kind": 9,
    "tags": [],
    "detail": "file module",
    "documentation": null
  }, {
    "label": "ListLabels",
    "kind": 9,
    "tags": [],
    "detail": "file module",
    "documentation": null
  }]

Complete tests/src/Completion.res 171:16
posCursor:[171:16] posNoWhite:[171:15] Found expr:[171:4->171:16]
JSX <WithChildren:[171:4->171:16] > _children:None
posCursor:[171:16] posNoWhite:[171:15] Found expr:[171:4->171:16]
Pexp_ident WithChildren.createElement:[171:4->171:16]
Completable: Cpath Module[WithChildren]
[{
    "label": "WithChildren",
    "kind": 9,
    "tags": [],
    "detail": "module",
    "documentation": null
  }]

Complete tests/src/Completion.res 174:16
posCursor:[174:16] posNoWhite:[174:15] Found type:[174:12->174:16]
Ptyp_constr Js.n:[174:12->174:16]
Completable: Cpath Type[Js, n]
[{
    "label": "null_undefined",
    "kind": 22,
    "tags": [],
    "detail": "type null_undefined<'a> = nullable<'a>",
    "documentation": null
  }, {
    "label": "nullable",
    "kind": 22,
    "tags": [],
    "detail": "type nullable<+'a>",
    "documentation": {"kind": "markdown", "value": " value of this type can be [undefined], [null] or ['a]\n    this type is the same as type [t] n {!Null_undefined} "}
  }, {
    "label": "null",
    "kind": 22,
    "tags": [],
    "detail": "type null<+'a>",
    "documentation": {"kind": "markdown", "value": " nullable, value of this type can be either [null] or ['a]\n    this type is the same as type [t] in {!Null}\n"}
  }]

Complete tests/src/Completion.res 176:20
posCursor:[176:20] posNoWhite:[176:19] Found type:[176:12->176:20]
Ptyp_constr ForAuto.:[176:12->176:20]
Completable: Cpath Type[ForAuto, ""]
[{
    "label": "t",
    "kind": 22,
    "tags": [],
    "detail": "type t = int",
    "documentation": null
  }]

Complete tests/src/Completion.res 181:13
posCursor:[181:13] posNoWhite:[181:12] Found expr:[181:11->181:13]
Pexp_construct As:[181:11->181:13] None
Completable: Cpath Value[As]
[{
    "label": "Asterix",
    "kind": 4,
    "tags": [],
    "detail": "Asterix\n\ntype z =  Allo | Asterix | Baba",
    "documentation": null
  }]

Complete tests/src/Completion.res 184:17
Pmod_ident For:[184:14->184:17]
Completable: Cpath Module[For]
[{
    "label": "ForAuto",
    "kind": 9,
    "tags": [],
    "detail": "module",
    "documentation": null
  }, {
    "label": "Format",
    "kind": 9,
    "tags": [],
    "detail": "file module",
    "documentation": null
  }]

Complete tests/src/Completion.res 192:11
posCursor:[192:11] posNoWhite:[192:10] Found expr:[192:3->195:6]
Pexp_ident Private.:[192:3->195:6]
Id breaks up. New path:Private.
Completable: Cpath Value[Private, ""]
[{
    "label": "b",
    "kind": 12,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 204:6
posCursor:[204:6] posNoWhite:[204:5] Found expr:[204:3->204:6]
Pexp_ident sha:[204:3->204:6]
Completable: Cpath Value[sha]
[]

Complete tests/src/Completion.res 207:6
posCursor:[207:6] posNoWhite:[207:5] Found expr:[207:3->207:6]
Pexp_ident sha:[207:3->207:6]
Completable: Cpath Value[sha]
[{
    "label": "shadowed",
    "kind": 12,
    "tags": [],
    "detail": "int",
    "documentation": null
  }]

Complete tests/src/Completion.res 210:6
posCursor:[210:6] posNoWhite:[210:5] Found expr:[210:3->210:6]
Pexp_ident sha:[210:3->210:6]
Completable: Cpath Value[sha]
[{
    "label": "shadowed",
    "kind": 12,
    "tags": [],
    "detail": "string",
    "documentation": null
  }]

Complete tests/src/Completion.res 223:22
posCursor:[223:22] posNoWhite:[223:21] Found expr:[223:3->226:22]
Pexp_send [223:22->223:22] e:[223:3->223:20]
Completable: Cpath Value[FAO, forAutoObject][""]
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null
  }, {
    "label": "forAutoLabel",
    "kind": 4,
    "tags": [],
    "detail": "FAR.forAutoRecord",
    "documentation": null
  }]

Complete tests/src/Completion.res 226:37
posCursor:[226:37] posNoWhite:[226:36] Found expr:[226:3->235:3]
Pexp_field [226:3->226:36] _:[235:0->235:3]
Completable: Cpath Value[FAO, forAutoObject]["forAutoLabel"].""
[{
    "label": "forAuto",
    "kind": 5,
    "tags": [],
    "detail": "forAuto: ForAuto.t\n\ntype forAutoRecord = {\n  forAuto: ForAuto.t,\n  something: option<int>,\n}",
    "documentation": null
  }, {
    "label": "something",
    "kind": 5,
    "tags": [],
    "detail": "something: option<int>\n\ntype forAutoRecord = {\n  forAuto: ForAuto.t,\n  something: option<int>,\n}",
    "documentation": null
  }]

Complete tests/src/Completion.res 229:46
posCursor:[229:46] posNoWhite:[229:45] Found expr:[229:3->0:-1]
Completable: Cpath Value[FAO, forAutoObject]["forAutoLabel"].forAuto->
[{
    "label": "ForAuto.abc",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null
  }, {
    "label": "ForAuto.abd",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null
  }]

Complete tests/src/Completion.res 232:55
posCursor:[232:55] posNoWhite:[232:54] Found expr:[232:3->232:55]
posCursor:[232:55] posNoWhite:[232:54] Found expr:[232:46->232:55]
Pexp_ident ForAuto.a:[232:46->232:55]
Completable: Cpath Value[ForAuto, a]
[{
    "label": "abc",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null
  }, {
    "label": "abd",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null
  }]

Complete tests/src/Completion.res 236:34
posCursor:[236:34] posNoWhite:[236:33] Found expr:[236:18->236:36]
Pexp_apply ...__ghost__[0:-1->0:-1] (...[236:18->236:32], ...[236:32->236:34])
posCursor:[236:34] posNoWhite:[236:33] Found expr:[236:32->236:34]
Pexp_ident na:[236:32->236:34]
Completable: Cpath Value[na]
[{
    "label": "name",
    "kind": 12,
    "tags": [],
    "detail": "string",
    "documentation": null
  }, {
    "label": "nan",
    "kind": 12,
    "tags": [],
    "detail": "float",
    "documentation": null
  }]

Complete tests/src/Completion.res 239:17
posCursor:[239:17] posNoWhite:[239:14] Found expr:[239:14->239:22]
Completable: Cnone
[]

Complete tests/src/Completion.res 245:8
posCursor:[245:8] posNoWhite:[245:7] Found expr:[243:8->248:1]
posCursor:[245:8] posNoWhite:[245:7] Found expr:[244:14->247:8]
posCursor:[245:8] posNoWhite:[245:7] Found expr:[244:14->247:1]
Pexp_apply ...[245:3->245:4] (...[244:14->244:15], ...[245:5->247:1])
posCursor:[245:8] posNoWhite:[245:7] Found expr:[245:5->247:1]
Pexp_field [245:5->245:7] _:[247:0->247:1]
Completable: Cpath Value[_z].""
[{
    "label": "x",
    "kind": 5,
    "tags": [],
    "detail": "x: int\n\ntype r = {x: int, y: string}",
    "documentation": null
  }, {
    "label": "y",
    "kind": 5,
    "tags": [],
    "detail": "y: string\n\ntype r = {x: int, y: string}",
    "documentation": null
  }]

