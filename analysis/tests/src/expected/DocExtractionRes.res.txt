Documentation extraction src/DocExtractionRes.res
extracting docs for src/DocExtractionRes.res

{
  "name": "DocExtractionRes",
  "docstrings": ["Module level documentation goes here."],
  "items": [
  {
    "kind": "type",
    "name": "t",
    "signature": "type t = {name: string, online: bool}",
    "docstrings": ["This type represents stuff."],
    "linkables": [],
    "detail": 
    {
      "kind": "record",
      "fieldDocs": [{
        "fieldName": "name",
        "docstrings": ["The name of the stuff."]
      }, {
        "fieldName": "online",
        "docstrings": ["Whether stuff is online."]
      }]
    }
  }, 
  {
    "kind": "value",
    "name": "make",
    "signature": "let make: string => t",
    "docstrings": ["Create stuff.\\n\\n```rescript example\\nlet stuff = make(\\\"My name\\\")\\n```"],
    "linkables": [{
        "path": "t",
        "moduleName": "DocExtractionRes",
        "external": false
      }]
  }, 
  {
    "kind": "value",
    "name": "asOffline",
    "signature": "let asOffline: t => t",
    "docstrings": ["Stuff goes offline."],
    "linkables": [{
        "path": "t",
        "moduleName": "DocExtractionRes",
        "external": false
      }]
  }, 
  {
    "kind": "module",
    "item": 
    {
      "name": "SomeInnerModule",
      "docstrings": ["Another module level docstring here."],
      "items": [
      {
        "kind": "type",
        "name": "status",
        "signature": "type status = Started(t) | Stopped | Idle",
        "docstrings": [],
        "linkables": [{
            "path": "t",
            "moduleName": "DocExtractionRes",
            "external": false
          }],
        "detail": 
        {
          "kind": "variant",
          "fieldDocs": [
          {
            "constructorName": "Started",
            "docstrings": ["If this is started or not"]
          }, 
          {
            "constructorName": "Stopped",
            "docstrings": ["Stopped?"]
          }, 
          {
            "constructorName": "Idle",
            "docstrings": ["Now idle."]
          }]
        }
      }, 
      {
        "kind": "type",
        "name": "validInputs",
        "signature": "type validInputs = [\\n  | #\\\"needs-escaping\\\"\\n  | #something\\n  | #status(status)\\n  | #withPayload(int)\\n]",
        "docstrings": ["These are all the valid inputs."],
        "linkables": []
      }, 
      {
        "kind": "type",
        "name": "callback",
        "signature": "type callback = (t, ~status: status) => unit",
        "docstrings": [],
        "linkables": [{
            "path": "t",
            "moduleName": "DocExtractionRes",
            "external": false
          }, {
            "path": "status",
            "moduleName": "DocExtractionRes",
            "external": false
          }]
      }]
    }
  }, 
  {
    "kind": "module",
    "item": 
    {
      "name": "AnotherModule",
      "docstrings": ["Mighty fine module here too!"],
      "items": [
      {
        "kind": "type",
        "name": "callback",
        "signature": "type callback = SomeInnerModule.status => unit",
        "docstrings": ["Testing what this looks like."],
        "linkables": [{
            "path": "SomeInnerModule.status",
            "moduleName": "DocExtractionRes",
            "external": false
          }]
      }, 
      {
        "kind": "value",
        "name": "isGoodStatus",
        "signature": "let isGoodStatus: SomeInnerModule.status => bool",
        "docstrings": [],
        "linkables": [{
            "path": "SomeInnerModule.status",
            "moduleName": "DocExtractionRes",
            "external": false
          }]
      }, 
      {
        "kind": "type",
        "name": "someVariantWithInlineRecords",
        "signature": "type someVariantWithInlineRecords = SomeStuff({offline: bool})",
        "docstrings": ["Trying how it looks with an inline record in a variant."],
        "linkables": [],
        "detail": 
        {
          "kind": "variant",
          "fieldDocs": [
          {
            "constructorName": "SomeStuff",
            "docstrings": ["This has inline records..."]
          }]
        }
      }, 
      {
        "kind": "type",
        "name": "domRoot",
        "signature": "type domRoot = unit => ReactDOM.Client.Root.t",
        "docstrings": ["Callback to get the DOM root..."],
        "linkables": [{
            "path": "ReactDOM.Client.Root.t",
            "moduleName": "ReactDOM",
            "external": true
          }]
      }]
    }
  }, 
  {
    "kind": "module",
    "item": 
    {
      "name": "ModuleWithThingsThatShouldNotBeExported",
      "docstrings": [],
      "items": [
      {
        "kind": "type",
        "name": "t",
        "signature": "type t",
        "docstrings": ["The type t is stuff."],
        "linkables": []
      }, 
      {
        "kind": "value",
        "name": "make",
        "signature": "let make: unit => t",
        "docstrings": ["The maker of stuff!"],
        "linkables": [{
            "path": "t",
            "moduleName": "DocExtractionRes",
            "external": false
          }]
      }]
    }
  }]
}

