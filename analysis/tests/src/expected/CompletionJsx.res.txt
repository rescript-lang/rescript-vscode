Complete src/CompletionJsx.res 3:17
posCursor:[3:17] posNoWhite:[3:16] Found expr:[3:3->3:17]
Completable: Cpath Value[someString]->st
ContextPath Value[someString]->st
ContextPath Value[someString]
Path someString
Path Js.String2.st
[{
    "label": "Js.String2.startsWith",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n"}
  }, {
    "label": "Js.String2.startsWithFrom",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, int) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n"}
  }]

Complete src/CompletionJsx.res 13:21
posCursor:[13:21] posNoWhite:[13:20] Found expr:[8:13->33:3]
posCursor:[13:21] posNoWhite:[13:20] Found expr:[9:4->32:10]
posCursor:[13:21] posNoWhite:[13:20] Found expr:[10:4->32:10]
posCursor:[13:21] posNoWhite:[13:20] Found expr:[11:4->32:10]
posCursor:[13:21] posNoWhite:[13:20] Found expr:[12:4->32:10]
posCursor:[13:21] posNoWhite:[13:20] Found expr:[13:7->32:10]
posCursor:[13:21] posNoWhite:[13:20] Found expr:[13:7->13:21]
Completable: Cpath Value[someString]->st <<jsx>>
ContextPath Value[someString]->st <<jsx>>
ContextPath Value[someString]
Path someString
Path Js.String2.st
[{
    "label": "React.string",
    "kind": 12,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "Turns `string` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Js.String2.startsWith",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n"}
  }, {
    "label": "Js.String2.startsWithFrom",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, int) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n"}
  }]

Complete src/CompletionJsx.res 18:24
posCursor:[18:24] posNoWhite:[18:23] Found expr:[8:13->33:3]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[9:4->32:10]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[10:4->32:10]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[11:4->32:10]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[12:4->32:10]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[18:24] posNoWhite:[18:23] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[16:7->32:4]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[17:7->32:4]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[18:10->32:4]
Pexp_construct :::[18:10->32:4] [18:10->32:4]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[18:10->32:4]
posCursor:[18:24] posNoWhite:[18:23] Found expr:[18:10->18:24]
Completable: Cpath Value[someString]->st <<jsx>>
ContextPath Value[someString]->st <<jsx>>
ContextPath Value[someString]
Path someString
Path Js.String2.st
[{
    "label": "React.string",
    "kind": 12,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "Turns `string` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Js.String2.startsWith",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n"}
  }, {
    "label": "Js.String2.startsWithFrom",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, int) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n"}
  }]

Complete src/CompletionJsx.res 20:27
posCursor:[20:27] posNoWhite:[20:26] Found expr:[8:13->33:3]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[9:4->32:10]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[10:4->32:10]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[11:4->32:10]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[12:4->32:10]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[20:27] posNoWhite:[20:26] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[16:7->32:4]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[17:7->32:4]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[20:10->32:4]
Pexp_construct :::[20:10->32:4] [20:10->32:4]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[20:10->32:4]
posCursor:[20:27] posNoWhite:[20:26] Found expr:[20:10->20:27]
Completable: Cpath string->st <<jsx>>
ContextPath string->st <<jsx>>
ContextPath string
Path Js.String2.st
[{
    "label": "React.string",
    "kind": 12,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "Turns `string` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Js.String2.startsWith",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n"}
  }, {
    "label": "Js.String2.startsWithFrom",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, int) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n"}
  }]

Complete src/CompletionJsx.res 22:44
posCursor:[22:44] posNoWhite:[22:43] Found expr:[8:13->33:3]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[9:4->32:10]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[10:4->32:10]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[11:4->32:10]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[12:4->32:10]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[22:44] posNoWhite:[22:43] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[16:7->32:4]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[17:7->32:4]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[22:10->32:4]
Pexp_construct :::[22:10->32:4] [22:10->32:4]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[22:10->32:4]
posCursor:[22:44] posNoWhite:[22:43] Found expr:[22:10->22:44]
Completable: Cpath Value[Js, String2, trim](Nolabel)->st <<jsx>>
ContextPath Value[Js, String2, trim](Nolabel)->st <<jsx>>
ContextPath Value[Js, String2, trim](Nolabel)
ContextPath Value[Js, String2, trim]
Path Js.String2.trim
Path Js.String2.st
[{
    "label": "React.string",
    "kind": 12,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "Turns `string` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Js.String2.startsWith",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n"}
  }, {
    "label": "Js.String2.startsWithFrom",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, int) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n"}
  }]

Complete src/CompletionJsx.res 24:19
posCursor:[24:19] posNoWhite:[24:18] Found expr:[8:13->33:3]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[9:4->32:10]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[10:4->32:10]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[11:4->32:10]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[12:4->32:10]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[24:19] posNoWhite:[24:18] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[16:7->32:4]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[17:7->32:4]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[24:10->32:4]
Pexp_construct :::[24:10->32:4] [24:10->32:4]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[24:10->32:4]
posCursor:[24:19] posNoWhite:[24:18] Found expr:[24:10->0:-1]
Completable: Cpath Value[someInt]-> <<jsx>>
ContextPath Value[someInt]-> <<jsx>>
ContextPath Value[someInt]
Path someInt
Path Belt.Int.
[{
    "label": "React.int",
    "kind": 12,
    "tags": [],
    "detail": "int",
    "documentation": {"kind": "markdown", "value": "Turns `int` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Belt.Int.fromString",
    "kind": 12,
    "tags": [],
    "detail": "string => option<int>",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `string` to an `int`. Returns `Some(int)` when the input is a number, `None` otherwise.\n\n  ```res example\n  Js.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.*",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Multiplication of two `int` values. Same as the multiplication from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 * 2 === 4) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int./",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Division of two `int` values. Same as the division from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(4 / 2 === 2); /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toFloat",
    "kind": 12,
    "tags": [],
    "detail": "int => float",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `float`.\n\n  ```res example\n  Js.log(Belt.Int.toFloat(1) === 1.0) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.fromFloat",
    "kind": 12,
    "tags": [],
    "detail": "float => int",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `float` to an `int`.\n\n  ```res example\n  Js.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.-",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Subtraction of two `int` values. Same as the subtraction from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 - 1 === 1) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.+",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Addition of two `int` values. Same as the addition from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 + 2 === 4) /* true */\n  ```\n"}
  }]

Complete src/CompletionJsx.res 26:14
posCursor:[26:14] posNoWhite:[26:13] Found expr:[8:13->33:3]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[9:4->32:10]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[10:4->32:10]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[11:4->32:10]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[12:4->32:10]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[26:14] posNoWhite:[26:13] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[16:7->32:4]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[17:7->32:4]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[26:10->32:4]
Pexp_construct :::[26:10->32:4] [26:10->32:4]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[26:10->32:4]
posCursor:[26:14] posNoWhite:[26:13] Found expr:[26:10->0:-1]
Completable: Cpath int-> <<jsx>>
ContextPath int-> <<jsx>>
ContextPath int
Path Belt.Int.
[{
    "label": "React.int",
    "kind": 12,
    "tags": [],
    "detail": "int",
    "documentation": {"kind": "markdown", "value": "Turns `int` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Belt.Int.fromString",
    "kind": 12,
    "tags": [],
    "detail": "string => option<int>",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `string` to an `int`. Returns `Some(int)` when the input is a number, `None` otherwise.\n\n  ```res example\n  Js.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.*",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Multiplication of two `int` values. Same as the multiplication from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 * 2 === 4) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int./",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Division of two `int` values. Same as the division from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(4 / 2 === 2); /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toFloat",
    "kind": 12,
    "tags": [],
    "detail": "int => float",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `float`.\n\n  ```res example\n  Js.log(Belt.Int.toFloat(1) === 1.0) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.fromFloat",
    "kind": 12,
    "tags": [],
    "detail": "float => int",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `float` to an `int`.\n\n  ```res example\n  Js.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.-",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Subtraction of two `int` values. Same as the subtraction from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 - 1 === 1) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.+",
    "kind": 12,
    "tags": [],
    "detail": "(int, int) => int",
    "documentation": {"kind": "markdown", "value": "\n  Addition of two `int` values. Same as the addition from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 + 2 === 4) /* true */\n  ```\n"}
  }]

Complete src/CompletionJsx.res 28:20
posCursor:[28:20] posNoWhite:[28:19] Found expr:[8:13->33:3]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[9:4->32:10]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[10:4->32:10]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[11:4->32:10]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[12:4->32:10]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[28:20] posNoWhite:[28:19] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[16:7->32:4]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[17:7->32:4]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[28:10->32:4]
Pexp_construct :::[28:10->32:4] [28:10->32:4]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[28:10->32:4]
posCursor:[28:20] posNoWhite:[28:19] Found expr:[28:10->28:20]
Completable: Cpath Value[someArr]->a <<jsx>>
ContextPath Value[someArr]->a <<jsx>>
ContextPath Value[someArr]
Path someArr
Path Js.Array2.a
[{
    "label": "React.array",
    "kind": 12,
    "tags": [],
    "detail": "array<React.element>",
    "documentation": {"kind": "markdown", "value": "Turns `array` into `React.element` so it can be used inside of JSX."},
    "sortText": "A",
    "insertTextFormat": 2
  }, {
    "label": "Js.Array2.append",
    "kind": 12,
    "tags": [1],
    "detail": "(t<'a>, 'a) => t<'a>",
    "documentation": {"kind": "markdown", "value": "Deprecated: `append` is not type-safe. Use `concat` instead.\n\n"}
  }]

Complete src/CompletionJsx.res 30:12
posCursor:[30:12] posNoWhite:[30:11] Found expr:[8:13->33:3]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[9:4->32:10]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[10:4->32:10]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[11:4->32:10]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[12:4->32:10]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[15:5->32:10]
JSX <div:[15:5->15:8] > _children:15:8
posCursor:[30:12] posNoWhite:[30:11] Found expr:[15:8->32:4]
Pexp_construct :::[16:7->32:4] [16:7->32:4]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[16:7->32:4]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[17:7->32:4]
Pexp_construct :::[17:7->32:4] [17:7->32:4]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[17:7->32:4]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[30:10->32:4]
Pexp_construct :::[30:10->32:4] [30:10->32:4]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[30:10->32:4]
posCursor:[30:12] posNoWhite:[30:11] Found expr:[30:10->30:12]
JSX <di:[30:10->30:12] > _children:None
Completable: ChtmlElement <di
[{
    "label": "<dialog>",
    "kind": 4,
    "tags": [],
    "detail": "Defines a dialog box or subwindow.",
    "documentation": {"kind": "markdown", "value": "Defines a dialog box or subwindow."},
    "insertText": "dialog"
  }, {
    "label": "<dir>",
    "kind": 4,
    "tags": [1],
    "detail": "Defines a directory list. Use <ul> instead.",
    "documentation": {"kind": "markdown", "value": "Deprecated: true\n\nDefines a directory list. Use <ul> instead."},
    "insertText": "dir"
  }, {
    "label": "<div>",
    "kind": 4,
    "tags": [],
    "detail": "Specifies a division or a section in a document.",
    "documentation": {"kind": "markdown", "value": "Specifies a division or a section in a document."},
    "insertText": "div"
  }]

Complete src/CompletionJsx.res 45:23
posCursor:[45:23] posNoWhite:[45:22] Found expr:[45:4->45:23]
JSX <CompWithoutJsxPpx:[45:4->45:21] n[45:22->45:23]=...[45:22->45:23]> _children:None
Completable: Cjsx([CompWithoutJsxPpx], n, [n])
Path CompWithoutJsxPpx.make
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null
  }]

