Complete src/DotPipeCompletionSpec.res 15:5
posCursor:[15:5] posNoWhite:[15:4] Found expr:[15:3->15:5]
Pexp_field [15:3->15:4] _:[18:0->15:5]
Completable: Cpath Value[n].""
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[n].""
ContextPath Value[n]
Path n
ContextPath Value[n]->
ContextPath Value[n]
Path n
CPPipe pathFromEnv:SomeModule found:true
Path SomeModule.
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "```rescript\nname: string\n```\n\n```rescript\ntype t = {name: string}\n```"}
  }, {
    "label": "->SomeModule.withUnlabelledArgumentNotFirst",
    "kind": 12,
    "tags": [],
    "detail": "(~name: string=?, t) => unit",
    "documentation": null,
    "sortText": "withUnlabelledArgumentNotFirst",
    "insertText": "->SomeModule.withUnlabelledArgumentNotFirst",
    "additionalTextEdits": [{
      "range": {"start": {"line": 15, "character": 4}, "end": {"line": 15, "character": 5}},
      "newText": ""
      }]
  }, {
    "label": "->SomeModule.getName",
    "kind": 12,
    "tags": [],
    "detail": "t => string",
    "documentation": null,
    "sortText": "getName",
    "insertText": "->SomeModule.getName",
    "additionalTextEdits": [{
      "range": {"start": {"line": 15, "character": 4}, "end": {"line": 15, "character": 5}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 44:6
posCursor:[44:6] posNoWhite:[44:5] Found expr:[44:3->44:6]
Pexp_field [44:3->44:5] _:[47:0->44:6]
Completable: Cpath Value[nn].""
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[nn].""
ContextPath Value[nn]
Path nn
ContextPath Value[nn]->
ContextPath Value[nn]
Path nn
CPPipe pathFromEnv:SomeOtherModule found:true
Path SomeOtherModule.
Path DotPipeCompletionSpec.CompleteFromThisToo.
Path DotPipeCompletionSpec.SomeOtherModule.
[{
    "label": "nname",
    "kind": 5,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "```rescript\nnname: string\n```\n\n```rescript\ntype typeOutsideModule = {nname: string}\n```"}
  }, {
    "label": "->SomeOtherModule.getNName",
    "kind": 12,
    "tags": [],
    "detail": "t => string",
    "documentation": null,
    "sortText": "getNName",
    "insertText": "->SomeOtherModule.getNName",
    "additionalTextEdits": [{
      "range": {"start": {"line": 44, "character": 5}, "end": {"line": 44, "character": 6}},
      "newText": ""
      }]
  }, {
    "label": "->SomeOtherModule.getNName2",
    "kind": 12,
    "tags": [],
    "detail": "typeOutsideModule => string",
    "documentation": null,
    "sortText": "getNName2",
    "insertText": "->SomeOtherModule.getNName2",
    "additionalTextEdits": [{
      "range": {"start": {"line": 44, "character": 5}, "end": {"line": 44, "character": 6}},
      "newText": ""
      }]
  }, {
    "label": "->CompleteFromThisToo.a",
    "kind": 12,
    "tags": [],
    "detail": "typeOutsideModule => string",
    "documentation": null,
    "sortText": "a",
    "insertText": "->CompleteFromThisToo.a",
    "additionalTextEdits": [{
      "range": {"start": {"line": 44, "character": 5}, "end": {"line": 44, "character": 6}},
      "newText": ""
      }]
  }, {
    "label": "->SomeOtherModule.getNName",
    "kind": 12,
    "tags": [],
    "detail": "t => string",
    "documentation": null,
    "sortText": "getNName",
    "insertText": "->SomeOtherModule.getNName",
    "additionalTextEdits": [{
      "range": {"start": {"line": 44, "character": 5}, "end": {"line": 44, "character": 6}},
      "newText": ""
      }]
  }, {
    "label": "->SomeOtherModule.getNName2",
    "kind": 12,
    "tags": [],
    "detail": "typeOutsideModule => string",
    "documentation": null,
    "sortText": "getNName2",
    "insertText": "->SomeOtherModule.getNName2",
    "additionalTextEdits": [{
      "range": {"start": {"line": 44, "character": 5}, "end": {"line": 44, "character": 6}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 62:5
posCursor:[62:5] posNoWhite:[62:4] Found expr:[62:3->62:5]
Pexp_field [62:3->62:4] _:[65:0->62:5]
Completable: Cpath Value[a].""
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[a].""
ContextPath Value[a]
Path a
ContextPath Value[a]->
ContextPath Value[a]
Path a
CPPipe pathFromEnv:A found:true
Path A.
Path B.
[{
    "label": "->A.withA",
    "kind": 12,
    "tags": [],
    "detail": "a => unit",
    "documentation": null,
    "sortText": "withA",
    "insertText": "->A.withA",
    "additionalTextEdits": [{
      "range": {"start": {"line": 62, "character": 4}, "end": {"line": 62, "character": 5}},
      "newText": ""
      }]
  }, {
    "label": "->B.b",
    "kind": 12,
    "tags": [],
    "detail": "A.a => int",
    "documentation": null,
    "sortText": "b",
    "insertText": "->B.b",
    "additionalTextEdits": [{
      "range": {"start": {"line": 62, "character": 4}, "end": {"line": 62, "character": 5}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 67:6
posCursor:[67:6] posNoWhite:[67:5] Found expr:[67:3->67:6]
Pexp_field [67:3->67:5] _:[70:0->67:6]
Completable: Cpath Value[xx].""
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[xx].""
ContextPath Value[xx]
Path xx
ContextPath Value[xx]->
ContextPath Value[xx]
Path xx
CPPipe pathFromEnv:CompletionFromModule.SomeModule found:false
Path CompletionFromModule.SomeModule.
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "```rescript\nname: string\n```\n\n```rescript\ntype t = {name: string}\n```"}
  }, {
    "label": "->CompletionFromModule.SomeModule.getName",
    "kind": 12,
    "tags": [],
    "detail": "t => string",
    "documentation": null,
    "sortText": "getName",
    "insertText": "->CompletionFromModule.SomeModule.getName",
    "additionalTextEdits": [{
      "range": {"start": {"line": 67, "character": 5}, "end": {"line": 67, "character": 6}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 75:9
posCursor:[75:9] posNoWhite:[75:8] Found expr:[75:3->75:9]
Pexp_field [75:3->75:7] u:[75:8->75:9]
Completable: Cpath Value[ffff].u
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[ffff].u
ContextPath Value[ffff]
Path ffff
ContextPath Value[ffff]->u
ContextPath Value[ffff]
Path ffff
Path Js.Array2.u
[{
    "label": "->Js.Array2.unshiftMany",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, array<'a>) => int",
    "documentation": {"kind": "markdown", "value": "\nAdds the elements in the second array argument at the beginning of the first\narray argument, returning the new number of elements in the array. *This\nfunction modifies the original array.* See\n[`Array.unshift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\non MDN.\n\n## Examples\n\n```rescript\nlet arr = [\"d\", \"e\"]\nJs.Array2.unshiftMany(arr, [\"a\", \"b\", \"c\"]) == 5\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n"},
    "sortText": "unshiftMany",
    "insertText": "->Js.Array2.unshiftMany",
    "additionalTextEdits": [{
      "range": {"start": {"line": 75, "character": 7}, "end": {"line": 75, "character": 8}},
      "newText": ""
      }]
  }, {
    "label": "->Js.Array2.unshift",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a) => int",
    "documentation": {"kind": "markdown", "value": "\nAdds the given element to the array, returning the new number of elements in\nthe array. *This function modifies the original array.* See\n[`Array.unshift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\non MDN.\n\n## Examples\n\n```rescript\nlet arr = [\"b\", \"c\", \"d\"]\nJs.Array2.unshift(arr, \"a\") == 4\narr == [\"a\", \"b\", \"c\", \"d\"]\n```\n"},
    "sortText": "unshift",
    "insertText": "->Js.Array2.unshift",
    "additionalTextEdits": [{
      "range": {"start": {"line": 75, "character": 7}, "end": {"line": 75, "character": 8}},
      "newText": ""
      }]
  }, {
    "label": "->Js.Array2.unsafe_get",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int) => 'a",
    "documentation": {"kind": "markdown", "value": "\nReturns the value at the given position in the array if the position is in\nbounds; returns the JavaScript value `undefined` otherwise.\n\n## Examples\n\n```rescript\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_get(arr, 3) == 103\nJs.Array2.unsafe_get(arr, 4) // returns undefined\n```\n"},
    "sortText": "unsafe_get",
    "insertText": "->Js.Array2.unsafe_get",
    "additionalTextEdits": [{
      "range": {"start": {"line": 75, "character": 7}, "end": {"line": 75, "character": 8}},
      "newText": ""
      }]
  }, {
    "label": "->Js.Array2.unsafe_set",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, 'a) => unit",
    "documentation": {"kind": "markdown", "value": "\nSets the value at the given position in the array if the position is in bounds.\nIf the index is out of bounds, well, “here there be dragons.“\n\n*This function modifies the original array.*\n\n## Examples\n\n```rescript\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_set(arr, 3, 99)\n// result is [100, 101, 102, 99];\n\nJs.Array2.unsafe_set(arr, 4, 88)\n// result is [100, 101, 102, 99, 88]\n\nJs.Array2.unsafe_set(arr, 6, 77)\n// result is [100, 101, 102, 99, 88, <1 empty item>, 77]\n\nJs.Array2.unsafe_set(arr, -1, 66)\n// you don't want to know.\n```\n"},
    "sortText": "unsafe_set",
    "insertText": "->Js.Array2.unsafe_set",
    "additionalTextEdits": [{
      "range": {"start": {"line": 75, "character": 7}, "end": {"line": 75, "character": 8}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 80:7
posCursor:[80:7] posNoWhite:[80:6] Found expr:[80:3->80:7]
Pexp_field [80:3->80:6] _:[84:0->80:7]
Completable: Cpath Value[nnn].""
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[nnn].""
ContextPath Value[nnn]
Path nnn
ContextPath Value[nnn]->
ContextPath Value[nnn]
Path nnn
CPPipe pathFromEnv: found:true
Path DotPipeCompletionSpec.
Path DotPipeCompletionSpec.SomeOtherModule.
[{
    "label": "nname",
    "kind": 5,
    "tags": [],
    "detail": "string",
    "documentation": {"kind": "markdown", "value": "```rescript\nnname: string\n```\n\n```rescript\ntype typeOutsideModule = {nname: string}\n```"}
  }, {
    "label": "->doWithTypeOutsideModule",
    "kind": 12,
    "tags": [],
    "detail": "typeOutsideModule => string",
    "documentation": null,
    "sortText": "doWithTypeOutsideModule",
    "insertText": "->doWithTypeOutsideModule",
    "additionalTextEdits": [{
      "range": {"start": {"line": 80, "character": 6}, "end": {"line": 80, "character": 7}},
      "newText": ""
      }]
  }, {
    "label": "->SomeOtherModule.getNName",
    "kind": 12,
    "tags": [],
    "detail": "t => string",
    "documentation": null,
    "sortText": "getNName",
    "insertText": "->SomeOtherModule.getNName",
    "additionalTextEdits": [{
      "range": {"start": {"line": 80, "character": 6}, "end": {"line": 80, "character": 7}},
      "newText": ""
      }]
  }, {
    "label": "->SomeOtherModule.getNName2",
    "kind": 12,
    "tags": [],
    "detail": "typeOutsideModule => string",
    "documentation": null,
    "sortText": "getNName2",
    "insertText": "->SomeOtherModule.getNName2",
    "additionalTextEdits": [{
      "range": {"start": {"line": 80, "character": 6}, "end": {"line": 80, "character": 7}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 86:43
posCursor:[86:43] posNoWhite:[86:42] Found expr:[86:3->86:43]
posCursor:[86:43] posNoWhite:[86:42] Found expr:[86:9->86:43]
Pexp_field [86:9->86:38] filt:[86:39->86:43]
Completable: Cpath Value[Js, Array2, filter](Nolabel).filt
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[Js, Array2, filter](Nolabel).filt
ContextPath Value[Js, Array2, filter](Nolabel)
ContextPath Value[Js, Array2, filter]
Path Js.Array2.filter
ContextPath Value[Js, Array2, filter](Nolabel, Nolabel)->filt
ContextPath Value[Js, Array2, filter](Nolabel, Nolabel)
ContextPath Value[Js, Array2, filter]
Path Js.Array2.filter
Path Js.Array2.filt
[{
    "label": "->Js.Array2.filter",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => bool) => t<'a>",
    "documentation": {"kind": "markdown", "value": "\nApplies the given predicate function (the second argument) to each element in\nthe array; the result is an array of those elements for which the predicate\nfunction returned `true`. See\n[`Array.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\non MDN.\n\n## Examples\n\n```rescript\nlet nonEmpty = s => s != \"\"\nJs.Array2.filter([\"abc\", \"\", \"\", \"def\", \"ghi\"], nonEmpty) == [\"abc\", \"def\", \"ghi\"]\n```\n"},
    "sortText": "filter",
    "insertText": "->Js.Array2.filter",
    "additionalTextEdits": [{
      "range": {"start": {"line": 86, "character": 38}, "end": {"line": 86, "character": 39}},
      "newText": ""
      }]
  }, {
    "label": "->Js.Array2.filteri",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, ('a, int) => bool) => t<'a>",
    "documentation": {"kind": "markdown", "value": "\nEach element of the given array are passed to the predicate function. The\nreturn value is an array of all those elements for which the predicate function\nreturned `true`.\n\nSee\n[`Array.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\non MDN.\n\n## Examples\n\n```rescript\n// keep only positive elements at odd indices\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.filteri([6, 3, 5, 8, 7, -4, 1], positiveOddElement) == [3, 8]\n```\n"},
    "sortText": "filteri",
    "insertText": "->Js.Array2.filteri",
    "additionalTextEdits": [{
      "range": {"start": {"line": 86, "character": 38}, "end": {"line": 86, "character": 39}},
      "newText": ""
      }]
  }]

Complete src/DotPipeCompletionSpec.res 89:70
posCursor:[89:70] posNoWhite:[89:69] Found expr:[89:3->89:70]
posCursor:[89:70] posNoWhite:[89:69] Found expr:[89:40->89:70]
Pexp_field [89:40->89:63] includ:[89:64->89:70]
Completable: Cpath Value[Js, Array2, joinWith](Nolabel).includ
Package opens Pervasives.JsxModules.place holder
Resolved opens 1 pervasives
ContextPath Value[Js, Array2, joinWith](Nolabel).includ
ContextPath Value[Js, Array2, joinWith](Nolabel)
ContextPath Value[Js, Array2, joinWith]
Path Js.Array2.joinWith
ContextPath Value[Js, Array2, joinWith](Nolabel, Nolabel)->includ
ContextPath Value[Js, Array2, joinWith](Nolabel, Nolabel)
ContextPath Value[Js, Array2, joinWith]
Path Js.Array2.joinWith
Path Js.String2.includ
[{
    "label": "->Js.String2.includesFrom",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, int) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n## Examples\n\n```rescript\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`대한민국`, `한`, 1) == true\n```\n"},
    "sortText": "includesFrom",
    "insertText": "->Js.String2.includesFrom",
    "additionalTextEdits": [{
      "range": {"start": {"line": 89, "character": 63}, "end": {"line": 89, "character": 64}},
      "newText": ""
      }]
  }, {
    "label": "->Js.String2.includes",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => bool",
    "documentation": {"kind": "markdown", "value": "\nES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n## Examples\n\n```rescript\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```\n"},
    "sortText": "includes",
    "insertText": "->Js.String2.includes",
    "additionalTextEdits": [{
      "range": {"start": {"line": 89, "character": 63}, "end": {"line": 89, "character": 64}},
      "newText": ""
      }]
  }]

