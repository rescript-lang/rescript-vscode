Complete src/CompletionInferValues.res 15:43
posCursor:[15:43] posNoWhite:[15:42] Found expr:[15:33->15:43]
Completable: Cpath Value[aliased]->f
[{
    "label": "Belt.Int.fromString",
    "kind": 12,
    "tags": [],
    "detail": "string => option<int>",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `string` to an `int`. Returns `Some(int)` when the input is a number, `None` otherwise.\n\n  ```res example\n  Js.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.fromFloat",
    "kind": 12,
    "tags": [],
    "detail": "float => int",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `float` to an `int`.\n\n  ```res example\n  Js.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n  ```\n"}
  }]

Complete src/CompletionInferValues.res 18:30
posCursor:[18:30] posNoWhite:[18:29] Found expr:[18:28->18:30]
Pexp_field [18:28->18:29] _:[34:0->18:30]
Completable: Cpath Value[x].""
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 21:53
posCursor:[21:53] posNoWhite:[21:52] Found expr:[21:45->21:53]
Pexp_field [21:45->21:52] _:[34:0->21:53]
Completable: Cpath Value[aliased].""
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 24:63
posCursor:[24:63] posNoWhite:[24:62] Found expr:[24:3->24:64]
Pexp_apply ...[24:3->24:21] (...[24:22->24:63])
posCursor:[24:63] posNoWhite:[24:62] Found expr:[24:22->24:63]
posCursor:[24:63] posNoWhite:[24:62] Found expr:[24:36->24:63]
posCursor:[24:63] posNoWhite:[24:62] Found expr:[24:42->24:63]
posCursor:[24:63] posNoWhite:[24:62] Found expr:[24:52->24:63]
Pexp_field [24:52->24:62] _:[24:63->24:63]
Completable: Cpath Value[someRecord].""
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 28:90
posCursor:[28:90] posNoWhite:[28:89] Found expr:[28:39->28:91]
Pexp_apply ...[28:39->28:48] (...[28:49->28:90])
posCursor:[28:90] posNoWhite:[28:89] Found expr:[28:49->28:90]
posCursor:[28:90] posNoWhite:[28:89] Found expr:[28:56->28:90]
posCursor:[28:90] posNoWhite:[28:89] Found expr:[28:69->28:90]
posCursor:[28:90] posNoWhite:[28:89] Found expr:[28:79->28:90]
Pexp_field [28:79->28:89] _:[28:90->28:90]
Completable: Cpath Value[someRecord].""
[]

Complete src/CompletionInferValues.res 31:36
posCursor:[31:36] posNoWhite:[31:35] Found expr:[31:3->31:39]
Pexp_apply ...[31:3->31:15] (...[31:16->31:38])
posCursor:[31:36] posNoWhite:[31:35] Found expr:[31:16->31:38]
posCursor:[31:36] posNoWhite:[31:35] Found expr:[31:27->31:36]
Completable: Cpath Value[event]->pr
[{
    "label": "ReactEvent.Mouse.preventDefault",
    "kind": 12,
    "tags": [],
    "detail": "t => unit",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 42:50
posCursor:[42:50] posNoWhite:[42:49] Found expr:[42:12->42:56]
JSX <div:[42:12->42:15] onMouseEnter[42:16->42:28]=...[42:36->42:52]> _children:42:54
posCursor:[42:50] posNoWhite:[42:49] Found expr:[42:36->42:52]
posCursor:[42:50] posNoWhite:[42:49] Found expr:[42:41->42:50]
Completable: Cpath Value[event]->pr <<jsx>>
[{
    "label": "JsxEvent.Mouse.preventDefault",
    "kind": 12,
    "tags": [],
    "detail": "t => unit",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 45:50
posCursor:[45:50] posNoWhite:[45:49] Found expr:[45:12->45:56]
JSX <Div:[45:12->45:15] onMouseEnter[45:16->45:28]=...[45:36->45:52]> _children:45:54
posCursor:[45:50] posNoWhite:[45:49] Found expr:[45:36->45:52]
posCursor:[45:50] posNoWhite:[45:49] Found expr:[45:41->45:50]
Completable: Cpath Value[event]->pr <<jsx>>
[{
    "label": "JsxEvent.Mouse.preventDefault",
    "kind": 12,
    "tags": [],
    "detail": "t => unit",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 48:87
posCursor:[48:87] posNoWhite:[48:86] Found expr:[48:12->48:93]
JSX <div:[48:12->48:15] onMouseEnter[48:16->48:28]=...[48:36->48:89]> _children:48:91
posCursor:[48:87] posNoWhite:[48:86] Found expr:[48:36->48:89]
posCursor:[48:87] posNoWhite:[48:86] Found expr:[48:41->48:87]
posCursor:[48:87] posNoWhite:[48:86] Found expr:[48:81->48:87]
Completable: Cpath Value[btn]->t <<jsx>>
[{
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }, {
    "label": "Belt.Int.toFloat",
    "kind": 12,
    "tags": [],
    "detail": "int => float",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `float`.\n\n  ```res example\n  Js.log(Belt.Int.toFloat(1) === 1.0) /* true */\n  ```\n"}
  }]

Complete src/CompletionInferValues.res 51:108
posCursor:[51:108] posNoWhite:[51:107] Found expr:[51:12->51:114]
JSX <div:[51:12->51:15] onMouseEnter[51:16->51:28]=...[51:36->51:110]> _children:51:112
posCursor:[51:108] posNoWhite:[51:107] Found expr:[51:36->51:110]
posCursor:[51:108] posNoWhite:[51:107] Found expr:[51:41->51:108]
posCursor:[51:108] posNoWhite:[51:107] Found expr:[51:100->51:108]
Completable: Cpath Value[btn]->spl <<jsx>>
[{
    "label": "Js.String2.splitAtMost",
    "kind": 12,
    "tags": [],
    "detail": "(t, t, ~limit: int) => array<t>",
    "documentation": {"kind": "markdown", "value": "\n  `splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```\n"}
  }, {
    "label": "Js.String2.splitByRe",
    "kind": 12,
    "tags": [],
    "detail": "(t, Js_re.t) => array<option<t>>",
    "documentation": {"kind": "markdown", "value": "\n`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n"}
  }, {
    "label": "Js.String2.split",
    "kind": 12,
    "tags": [],
    "detail": "(t, t) => array<t>",
    "documentation": {"kind": "markdown", "value": "\n`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n"}
  }, {
    "label": "Js.String2.splitByReAtMost",
    "kind": 12,
    "tags": [],
    "detail": "(t, Js_re.t, ~limit: int) => array<option<t>>",
    "documentation": {"kind": "markdown", "value": "\n`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n"}
  }]

Complete src/CompletionInferValues.res 54:130
posCursor:[54:130] posNoWhite:[54:129] Found expr:[54:12->54:136]
JSX <div:[54:12->54:15] onMouseEnter[54:16->54:28]=...[54:36->54:132]> _children:54:134
posCursor:[54:130] posNoWhite:[54:129] Found expr:[54:36->54:132]
posCursor:[54:130] posNoWhite:[54:129] Found expr:[54:41->54:130]
posCursor:[54:130] posNoWhite:[54:129] Found expr:[54:123->54:130]
Completable: Cpath Value[btn]->ma <<jsx>>
[{
    "label": "Js.Array2.mapi",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, ('a, int) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\nApplies the function (the second argument) to each item in the array, returning\na new array. The function acceps two arguments: an item from the array and its\nindex number. The result array does not have to have elements of the same type\nas the input array. See\n[`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\non MDN.\n\n```res example\n// multiply each item in array by its position\nlet product = (item, index) => item * index\nJs.Array2.mapi([10, 11, 12], product) == [0, 11, 24]\n```\n"}
  }, {
    "label": "Js.Array2.map",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\nApplies the function (the second argument) to each item in the array, returning\na new array. The result array does not have to have elements of the same type\nas the input array. See\n[`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\non MDN.\n\n```res example\nJs.Array2.map([12, 4, 8], x => x * x) == [144, 16, 64]\nJs.Array2.map([\"animal\", \"vegetable\", \"mineral\"], Js.String.length) == [6, 9, 7]\n```\n"}
  }]

Complete src/CompletionInferValues.res 57:52
posCursor:[57:52] posNoWhite:[57:51] Found expr:[57:50->57:52]
Pexp_field [57:50->57:51] _:[60:0->57:52]
Completable: Cpath Value[x].""
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 74:78
posCursor:[74:78] posNoWhite:[74:77] Found expr:[74:70->74:78]
Pexp_field [74:70->74:77] _:[101:0->74:78]
Completable: Cpath Value[srecord].""
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 78:86
posCursor:[78:86] posNoWhite:[78:85] Found expr:[78:78->78:86]
Pexp_field [78:78->78:85] _:[101:0->78:86]
Completable: Cpath Value[aliased].""
[{
    "label": "someRecord",
    "kind": 5,
    "tags": [],
    "detail": "someRecord: someRecord\n\ntype someNestedRecord = {someRecord: someRecord}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 82:103
posCursor:[82:103] posNoWhite:[82:102] Found expr:[82:92->82:103]
Pexp_field [82:92->82:102] _:[101:0->82:103]
Completable: Cpath Value[someRecord].""
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\ntype someRecord = {name: string, age: int}",
    "documentation": null
  }]

Complete src/CompletionInferValues.res 86:81
posCursor:[86:81] posNoWhite:[86:80] Found expr:[86:69->86:81]
Completable: Cpath Value[things]->slic
[{
    "label": "Js.String2.sliceToEnd",
    "kind": 12,
    "tags": [],
    "detail": "(t, ~from: int) => t",
    "documentation": {"kind": "markdown", "value": "\n`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n"}
  }, {
    "label": "Js.String2.slice",
    "kind": 12,
    "tags": [],
    "detail": "(t, ~from: int, ~to_: int) => t",
    "documentation": {"kind": "markdown", "value": "\n`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```\n"}
  }]

Complete src/CompletionInferValues.res 90:82
posCursor:[90:82] posNoWhite:[90:81] Found expr:[90:70->90:82]
Completable: Cpath Value[someInt]->toS
[{
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }]

Complete src/CompletionInferValues.res 94:106
posCursor:[94:106] posNoWhite:[94:105] Found expr:[94:94->94:106]
Completable: Cpath Value[someInt]->toS
[{
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }]

Complete src/CompletionInferValues.res 98:99
posCursor:[98:99] posNoWhite:[98:98] Found expr:[98:57->98:99]
posCursor:[98:99] posNoWhite:[98:98] Found expr:[98:87->98:99]
Completable: Cpath Value[someInt]->toS
[{
    "label": "Belt.Int.toString",
    "kind": 12,
    "tags": [],
    "detail": "int => string",
    "documentation": {"kind": "markdown", "value": "\n  Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```\n"}
  }]

Complete src/CompletionInferValues.res 105:26
posCursor:[105:26] posNoWhite:[105:25] Found expr:[105:3->105:37]
Pexp_apply ...[105:3->105:23] (...[105:24->105:36])
posCursor:[105:26] posNoWhite:[105:25] Found expr:[105:24->105:36]
posCursor:[105:26] posNoWhite:[105:25] Found pattern:[105:25->105:27]
posCursor:[105:26] posNoWhite:[105:25] Found pattern:[105:25->105:27]
Completable: Cpattern CArgument CArgument Value[fnWithRecordCallback]($0)($0)->recordBody
[{
    "label": "name",
    "kind": 5,
    "tags": [],
    "detail": "name: string\n\nsomeRecord",
    "documentation": null
  }, {
    "label": "age",
    "kind": 5,
    "tags": [],
    "detail": "age: int\n\nsomeRecord",
    "documentation": null
  }]

