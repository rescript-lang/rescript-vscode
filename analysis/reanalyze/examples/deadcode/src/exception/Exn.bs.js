// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function raises(param) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var catches1;

try {
  catches1 = undefined;
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn.RE_EXN_ID === "Not_found") {
    catches1 = undefined;
  } else {
    throw exn;
  }
}

var catches2;

try {
  catches2 = undefined;
}
catch (raw_exn$1){
  var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
  if (exn$1.RE_EXN_ID === "Not_found") {
    catches2 = undefined;
  } else {
    throw exn$1;
  }
}

var raiseAndCatch;

try {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}
catch (exn$2){
  raiseAndCatch = undefined;
}

function raisesWithAnnotaion(param) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

throw {
      RE_EXN_ID: "Not_found",
      Error: new Error()
    };

export {
  raises ,
  catches1 ,
  catches2 ,
  raiseAndCatch ,
  raisesWithAnnotaion ,
  callsRaiseWithAnnotation ,
  callsRaiseWithAnnotationAndIsAnnotated ,
  z ,
  incompleteMatch ,
  A ,
  B ,
  twoRaises ,
  sequencing ,
  wrongCatch ,
  C ,
  wrongCatch2 ,
  raise2Annotate3 ,
  $$Error ,
  parse_json_from_file ,
  reRaise ,
  switchWithCatchAll ,
  raiseInInternalLet ,
  indirectCall ,
  array ,
  id ,
  tryChar ,
  StringHash ,
  specializedHash ,
  genericHash ,
  raiseAtAt ,
  raisePipe ,
  raiseArrow ,
  bar ,
  foo ,
  stringMake1 ,
  stringMake2 ,
  stringMake3 ,
  severalCases ,
  genericRaiseIsNotSupported ,
  redundant ,
  redundant2 ,
  redundant3 ,
  redundant4 ,
  exits ,
  redundantAnnotation ,
  _x ,
  onFunction ,
  onResult ,
  onFunctionPipe ,
  onResultPipeWrong ,
}
/* catches1 Not a pure module */
